Index: src/Celular.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Celular {\r\n    public static void main(String[] args) {\r\n        Aplicativos reprodutor = new Aplicativos();\r\n        //reprodutor\r\n        System.out.println(\"--Métodos do reprodutor de músicas--\");\r\n        reprodutor.play(\"Spit It Out\");\r\n        System.out.println(reprodutor.pause());\r\n\r\n        //chamadas\r\n        System.out.println(\"--Métodos das chamadas--\");\r\n        Aplicativos chamadas = new Aplicativos();\r\n        chamadas.chamar(\"85738066\");\r\n        chamadas.atenderRecusar();\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Celular.java b/src/Celular.java
--- a/src/Celular.java	(revision ace428370e6db7ade3201145568bd03b1383fdf8)
+++ b/src/Celular.java	(date 1718939311713)
@@ -1,6 +1,9 @@
+import aplicativos.*;
+
+
 public class Celular {
     public static void main(String[] args) {
-        Aplicativos reprodutor = new Aplicativos();
+        Reprodutor reprodutor = new Reprodutor();
         //reprodutor
         System.out.println("--Métodos do reprodutor de músicas--");
         reprodutor.play("Spit It Out");
@@ -8,7 +11,7 @@
 
         //chamadas
         System.out.println("--Métodos das chamadas--");
-        Aplicativos chamadas = new Aplicativos();
+        Chamadas chamadas = new Chamadas();
         chamadas.chamar("85738066");
         chamadas.atenderRecusar();
 
Index: src/Aplicativos.java
===================================================================
diff --git a/src/Aplicativos.java b/src/Aplicativos.java
deleted file mode 100644
--- a/src/Aplicativos.java	(revision ace428370e6db7ade3201145568bd03b1383fdf8)
+++ /dev/null	(revision ace428370e6db7ade3201145568bd03b1383fdf8)
@@ -1,71 +0,0 @@
-import java.util.Random;
-import java.util.Scanner;
-
-public class Aplicativos extends Celular {
-    // atributos do reprodutor de músicas
-    private String nomeMusica;
-//    private String artista;
-//    private List<Aplicativos> musicasList
-
-//    public String getArtista() {
-//        return artista;
-//    }
-
-//    public void setArtista(String artista) {
-//        this.artista = artista;
-//    }
-
-    public String getNomeMusica() {
-        return nomeMusica;
-    }
-
-    public void setNomeMusica(String nomeMusica) {
-        this.nomeMusica = nomeMusica;
-    }
-
-    // métodos do reprodutor
-    public void play(String nomeMusica) {
-        setNomeMusica(nomeMusica);
-//        setArtista(artista);
-        System.out.println("Reproduzindo agora: " + getNomeMusica());
-    }
-
-    public String pause() {
-        return "Música pausada.\n";
-    }
-    // TODO selecionar músicas de uma lista
-
-    public String getNumeroTelefone() {
-        return numeroTelefone;
-    }
-
-    // atributo das ligações
-    private String numeroTelefone;
-
-    // métodos das ligações
-    public void chamar(String numeroTelefoneChamado) {
-        System.out.println("Ligando para " + numeroTelefoneChamado);
-
-    }
-
-    public String receberLigacaoAleatoria() {
-        Random telefoneAleatorio = new Random();
-        String numeroAleatorio = "(85) 9 ";
-        for (int i = 0; i < 10; i++) {
-            int digitoAleatorio = telefoneAleatorio.nextInt(10);
-            numeroAleatorio += digitoAleatorio;
-        }
-        return numeroAleatorio;
-    }
-
-    public void atenderRecusar() {
-        Scanner simNao = new Scanner(System.in);
-        System.out.println("Recebendo chamada de " + receberLigacaoAleatoria() + ", deseja atender? (S/N)");
-        String escolha = simNao.nextLine().toLowerCase();
-        if (escolha.equalsIgnoreCase("s")) {
-            System.out.println("Chamada de " + receberLigacaoAleatoria() + " aceita");
-        } else System.out.println("Chamada recusada");
-    }
-
-
-}
\ No newline at end of file
Index: src/aplicativos/Chamadas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/aplicativos/Chamadas.java b/src/aplicativos/Chamadas.java
new file mode 100644
--- /dev/null	(date 1718939150336)
+++ b/src/aplicativos/Chamadas.java	(date 1718939150336)
@@ -0,0 +1,34 @@
+package aplicativos;
+
+import java.util.Random;
+import java.util.Scanner;
+
+public class Chamadas {
+    // atributo das ligações
+    private String numeroTelefone;
+
+    // métodos das ligações
+    public void chamar(String numeroTelefoneChamado) {
+        System.out.println("Ligando para " + numeroTelefoneChamado);
+
+    }
+
+    public String receberLigacaoAleatoria() {
+        Random telefoneAleatorio = new Random();
+        String numeroAleatorio = "(85) 9 ";
+        for (int i = 0; i < 10; i++) {
+            int digitoAleatorio = telefoneAleatorio.nextInt(10);
+            numeroAleatorio += digitoAleatorio;
+        }
+        return numeroAleatorio;
+    }
+
+    public void atenderRecusar() {
+        Scanner simNao = new Scanner(System.in);
+        System.out.println("Recebendo chamada de " + receberLigacaoAleatoria() + ", deseja atender? (S/N)");
+        String escolha = simNao.nextLine().toLowerCase();
+        if (escolha.equalsIgnoreCase("s")) {
+            System.out.println("Chamada de " + receberLigacaoAleatoria() + " aceita");
+        } else System.out.println("Chamada recusada");
+    }
+}
Index: src/aplicativos/Reprodutor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/aplicativos/Reprodutor.java b/src/aplicativos/Reprodutor.java
new file mode 100644
--- /dev/null	(date 1718939311716)
+++ b/src/aplicativos/Reprodutor.java	(date 1718939311716)
@@ -0,0 +1,38 @@
+package aplicativos;
+
+public class Reprodutor {
+    // atributos do reprodutor de músicas
+    private String nomeMusica;
+//    private String artista;
+//    private List<aplicativos.Aplicativos> musicasList
+
+//    public String getArtista() {
+//        return artista;
+//    }
+
+//    public void setArtista(String artista) {
+//        this.artista = artista;
+//    }
+
+    public String getNomeMusica() {
+        return nomeMusica;
+    }
+
+    public void setNomeMusica(String nomeMusica) {
+        this.nomeMusica = nomeMusica;
+    }
+
+    // métodos do reprodutor
+    public void play(String nomeMusica) {
+        setNomeMusica(nomeMusica);
+//        setArtista(artista);
+        System.out.println("Reproduzindo agora: " + getNomeMusica());
+    }
+
+    public String pause() {
+        return "Música pausada.\n";
+    }
+    // TODO selecionar músicas de uma lista
+
+
+}
